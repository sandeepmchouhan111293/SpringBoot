package com.infybank.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.hibernate.sql.Template;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.infybank.dto.CustomerDTO;
import com.infybank.entity.Customer;
import com.infybank.exception.InfyBankException;
import com.infybank.exception.InfyBankExceptionHandler;
import com.infybank.repository.CustomerRepository;

@Service(value="customerService")
@Transactional
public class CustomerServiceImpl implements CustomerService{

	@Autowired
	private CustomerRepository customerRepository;
	
	@Override
	public List<CustomerDTO> getAllCustomerDetails() throws InfyBankException {
		Iterable<Customer> customers = customerRepository.findAll();
		List<CustomerDTO> customerList = new ArrayList<>();
		customers.forEach(customer ->{
			CustomerDTO cust = new CustomerDTO();
			cust.setCustomerId(customer.getCustomerId());
			cust.setName(customer.getName());
			cust.setEmailId(customer.getEmailId());
			cust.setDateOfBirth(customer.getDateOfBirth());
			customerList.add(cust);
		});
		if(customerList.isEmpty()) {
			throw new InfyBankException("Service.CUSTOMERS_NOT_FOUND");
		}
			
		return customerList;
	}

	@Override
	public CustomerDTO getCustomerDetails(Integer customerId) throws InfyBankException {
		Optional<Customer> tempCustomer = customerRepository.findById(customerId);
		if(tempCustomer.isEmpty())
			throw new InfyBankException("Service.Customer_NOT_FOUND");
		Customer customer = tempCustomer.get();
		CustomerDTO dtoObject = new CustomerDTO();
		if(customer.getCustomerId() != null)	dtoObject.setCustomerId(customer.getCustomerId());
		if(!customer.getName().isEmpty() && customer.getName() != "")	dtoObject.setName(customer.getName());
		if(customer.getDateOfBirth() != null )	dtoObject.setDateOfBirth(customer.getDateOfBirth());
		if(customer.getEmailId() != null)	dtoObject.setEmailId(customer.getEmailId());
		return dtoObject;
	}

	@Override
	public Integer addCustomer(Customer customer) {	
		Customer cust =customerRepository.save(customer);
		return cust.getCustomerId();
	}

	@Override
	public void deleteCustomer(Integer customerId) {
		customerRepository.deleteById(customerId);
	}

	@Override
	public void updateCustomer(Integer customerId, Customer cust) throws InfyBankException {
		Optional<Customer> customer = customerRepository.findById(customerId);
		if(customer.isPresent()) {
			Customer tempCustomer = customer.orElseThrow(()-> new InfyBankException("Service.Customer_NOT_FOUND"));
			tempCustomer.setName(cust.getName());
			tempCustomer.setEmailId(cust.getEmailId());
			tempCustomer.setDateOfBirth(cust.getDateOfBirth());
			customerRepository.save(tempCustomer);
		}	
	}

}
